{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kitri\\\\Documents\\\\GitHub\\\\reactpage123\\\\client\\\\src\\\\components\\\\views\\\\VideoDetailPage\\\\Sections\\\\Subscribe.js\";\nimport React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\n\nfunction Subscribe(props) {\n  const [SubscribeNumber, setSubscribeNumber] = useState(0);\n  const [Subscribed, setSubscribed] = useState(false);\n  useEffect(() => {\n    let variable = {\n      userTo: props.userTo\n    };\n    Axios.post('/api/subscribe/subscribeNumber', variable).then(response => {\n      if (response.data.success) {\n        setSubscribeNumber(response.data.subscribeNumber);\n      } else {\n        alert('구독자 수 정보를 받아오지 못했습니다.');\n      }\n    });\n    let subscribedVariable = {\n      userTo: props.userTo,\n      userFrom: localStorage.getItem('userId')\n    };\n    Axios.post('/api/subscribe/subscribed', subscribedVariable).then(response => {\n      if (response.data.success) {\n        setSubscribed(response.data.subscribed);\n      } else {\n        alert('정보를 받아오지 못했습니다.');\n      }\n    });\n  }, []);\n\n  const onSubscribe = () => {\n    let subscribedVariable = {\n      userTo: props.userTo,\n      userFrom: props.userFrom\n    };\n\n    if (Subscribed) {\n      //이미 구독중일 때\n      Axios.post('/api/subscribe/unSubscribe', subscribedVariable).then(response => {\n        if (response.data.success) {\n          setSubscribeNumber(SubscribeNumber - 1);\n          setSubscribed(!Subscribed);\n        } else {\n          alert('구독 취소 실패');\n        }\n      });\n    } else {\n      //아직 구독 중 아닐 때\n      Axios.post('/api/subscribe/subscribe', subscribedVariable).then(response => {\n        if (response.data.success) {\n          setSubscribeNumber(SubscribeNumber + 1);\n          setSubscribed(!Subscribed);\n        } else {\n          alert('구독 실패');\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      backgroundColor: `${Subscribed ? '#AAAAAA' : '#CC0000'}`,\n      borderRadius: '4px',\n      color: 'white',\n      padding: '10px 16px',\n      fontWeight: '500',\n      fontSize: '1rem',\n      textTransform: 'uppercase'\n    },\n    onClick: onSubscribe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, SubscribeNumber, \" \", Subscribed ? 'Subscribed' : 'Subscribe'));\n}\n\nexport default Subscribe;","map":{"version":3,"sources":["C:/Users/kitri/Documents/GitHub/reactpage123/client/src/components/views/VideoDetailPage/Sections/Subscribe.js"],"names":["React","useEffect","useState","Axios","Subscribe","props","SubscribeNumber","setSubscribeNumber","Subscribed","setSubscribed","variable","userTo","post","then","response","data","success","subscribeNumber","alert","subscribedVariable","userFrom","localStorage","getItem","subscribed","onSubscribe","backgroundColor","borderRadius","color","padding","fontWeight","fontSize","textTransform"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react'\r\nimport Axios from 'axios'\r\n\r\n\r\nfunction Subscribe(props) {\r\n\r\n    const [SubscribeNumber, setSubscribeNumber] = useState(0)\r\n    const [Subscribed, setSubscribed] = useState(false)\r\n    useEffect(() => {\r\n\r\n        let variable = { userTo: props.userTo}\r\n\r\n       Axios.post('/api/subscribe/subscribeNumber', variable)\r\n       .then(response => {\r\n           if(response.data.success) {\r\n                setSubscribeNumber(response.data.subscribeNumber)\r\n           } else {\r\n               alert('구독자 수 정보를 받아오지 못했습니다.')\r\n           }\r\n       })\r\n\r\n       let subscribedVariable = { userTo: props.userTo, userFrom: localStorage.getItem('userId') }\r\n\r\n       Axios.post('/api/subscribe/subscribed', subscribedVariable)\r\n       .then(response => {\r\n        if(response.data.success) {\r\n            setSubscribed(response.data.subscribed)\r\n        } else {\r\n            alert('정보를 받아오지 못했습니다.')\r\n        }\r\n    })\r\n    }, [])\r\n\r\n    const onSubscribe = () => {\r\n\r\n        let subscribedVariable = {\r\n\r\n            userTo: props.userTo,\r\n            userFrom: props.userFrom\r\n        }\r\n\r\n\r\n        if(Subscribed) {\r\n            //이미 구독중일 때\r\n\r\n            Axios.post('/api/subscribe/unSubscribe', subscribedVariable)\r\n                .then(response => {\r\n                    if(response.data.success) {\r\n                        setSubscribeNumber(SubscribeNumber - 1)\r\n                        setSubscribed(!Subscribed)\r\n                    }else {\r\n                        alert('구독 취소 실패')\r\n                    }\r\n                })\r\n        }else {\r\n            //아직 구독 중 아닐 때\r\n            Axios.post('/api/subscribe/subscribe', subscribedVariable)\r\n                .then(response => {\r\n                    if(response.data.success) {\r\n                        setSubscribeNumber(SubscribeNumber + 1)\r\n                        setSubscribed(!Subscribed)\r\n                    }else {\r\n                        alert('구독 실패')\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                style={{\r\n                    backgroundColor: `${Subscribed ? '#AAAAAA' : '#CC0000'}`, \r\n                    borderRadius: '4px', color: 'white',\r\n                    padding: '10px 16px', fontWeight: '500', \r\n                    fontSize: '1rem', textTransform: 'uppercase'\r\n                 }}\r\n                 onClick={onSubscribe}\r\n            >\r\n                {SubscribeNumber} {Subscribed ? 'Subscribed' : 'Subscribe'}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subscribe\r\n"]},"metadata":{},"sourceType":"module"}