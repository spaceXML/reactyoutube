{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\kitri\\\\Documents\\\\GitHub\\\\reactpage123\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import Axios from'axios';function Subscribe(props){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),SubscribeNumber=_useState2[0],setSubscribeNumber=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),Subscribed=_useState4[0],setSubscribed=_useState4[1];useEffect(function(){var variable={userTo:props.userTo};Axios.post('/api/subscribe/subscribeNumber',variable).then(function(response){if(response.data.success){setSubscribeNumber(response.data.subscribeNumber);}else{alert('구독자 수 정보를 받아오지 못했습니다.');}});var subscribedVariable={userTo:props.userTo,userFrom:localStorage.getItem('userId')};Axios.post('/api/subscribe/subscribed',subscribedVariable).then(function(response){if(response.data.success){setSubscribed(response.data.subscribed);}else{alert('정보를 받아오지 못했습니다.');}});},[]);var onSubscribe=function onSubscribe(){var subscribedVariable={userTo:props.userTo,userFrom:props.userFrom};if(Subscribed){//이미 구독중일 때\nAxios.post('/api/subscribe/unSubscribe',subscribedVariable).then(function(response){if(response.data.success){setSubscribeNumber(SubscribeNumber-1);setSubscribed(!Subscribed);}else{alert('구독 취소 실패');}});}else{//아직 구독 중 아닐 때\nAxios.post('/api/subscribe/subscribe',subscribedVariable).then(function(response){if(response.data.success){setSubscribeNumber(SubscribeNumber+1);setSubscribed(!Subscribed);}else{alert('구독 실패');}});}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{style:{backgroundColor:\"\".concat(Subscribed?'#AAAAAA':'#CC0000'),borderRadius:'4px',color:'white',padding:'10px 16px',fontWeight:'500',fontSize:'1rem',textTransform:'uppercase'},onClick:onSubscribe},SubscribeNumber,\" \",Subscribed?'Subscribed':'Subscribe'));}export default Subscribe;","map":{"version":3,"sources":["C:/Users/kitri/Documents/GitHub/reactpage123/client/src/components/views/VideoDetailPage/Sections/Subscribe.js"],"names":["React","useEffect","useState","Axios","Subscribe","props","SubscribeNumber","setSubscribeNumber","Subscribed","setSubscribed","variable","userTo","post","then","response","data","success","subscribeNumber","alert","subscribedVariable","userFrom","localStorage","getItem","subscribed","onSubscribe","backgroundColor","borderRadius","color","padding","fontWeight","fontSize","textTransform"],"mappings":"qLAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA0C,OAA1C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAGA,QAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0B,eAEwBH,QAAQ,CAAC,CAAD,CAFhC,wCAEfI,eAFe,eAEEC,kBAFF,8BAGcL,QAAQ,CAAC,KAAD,CAHtB,yCAGfM,UAHe,eAGHC,aAHG,eAItBR,SAAS,CAAC,UAAM,CAEZ,GAAIS,CAAAA,QAAQ,CAAG,CAAEC,MAAM,CAAEN,KAAK,CAACM,MAAhB,CAAf,CAEDR,KAAK,CAACS,IAAN,CAAW,gCAAX,CAA6CF,QAA7C,EACCG,IADD,CACM,SAAAC,QAAQ,CAAI,CACd,GAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAjB,CAA0B,CACrBT,kBAAkB,CAACO,QAAQ,CAACC,IAAT,CAAcE,eAAf,CAAlB,CACJ,CAFD,IAEO,CACHC,KAAK,CAAC,uBAAD,CAAL,CACH,CACJ,CAPD,EASA,GAAIC,CAAAA,kBAAkB,CAAG,CAAER,MAAM,CAAEN,KAAK,CAACM,MAAhB,CAAwBS,QAAQ,CAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAlC,CAAzB,CAEAnB,KAAK,CAACS,IAAN,CAAW,2BAAX,CAAwCO,kBAAxC,EACCN,IADD,CACM,SAAAC,QAAQ,CAAI,CACjB,GAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAjB,CAA0B,CACtBP,aAAa,CAACK,QAAQ,CAACC,IAAT,CAAcQ,UAAf,CAAb,CACH,CAFD,IAEO,CACHL,KAAK,CAAC,iBAAD,CAAL,CACH,CACJ,CAPE,EAQF,CAvBQ,CAuBN,EAvBM,CAAT,CAyBA,GAAMM,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CAEtB,GAAIL,CAAAA,kBAAkB,CAAG,CAErBR,MAAM,CAAEN,KAAK,CAACM,MAFO,CAGrBS,QAAQ,CAAEf,KAAK,CAACe,QAHK,CAAzB,CAOA,GAAGZ,UAAH,CAAe,CACX;AAEAL,KAAK,CAACS,IAAN,CAAW,4BAAX,CAAyCO,kBAAzC,EACKN,IADL,CACU,SAAAC,QAAQ,CAAI,CACd,GAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAjB,CAA0B,CACtBT,kBAAkB,CAACD,eAAe,CAAG,CAAnB,CAAlB,CACAG,aAAa,CAAC,CAACD,UAAF,CAAb,CACH,CAHD,IAGM,CACFU,KAAK,CAAC,UAAD,CAAL,CACH,CACJ,CARL,EASH,CAZD,IAYM,CACF;AACAf,KAAK,CAACS,IAAN,CAAW,0BAAX,CAAuCO,kBAAvC,EACKN,IADL,CACU,SAAAC,QAAQ,CAAI,CACd,GAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAjB,CAA0B,CACtBT,kBAAkB,CAACD,eAAe,CAAG,CAAnB,CAAlB,CACAG,aAAa,CAAC,CAACD,UAAF,CAAb,CACH,CAHD,IAGM,CACFU,KAAK,CAAC,OAAD,CAAL,CACH,CACJ,CARL,EASH,CACJ,CAjCD,CAmCA,mBACI,4CACI,8BACI,KAAK,CAAE,CACHO,eAAe,WAAKjB,UAAU,CAAG,SAAH,CAAe,SAA9B,CADZ,CAEHkB,YAAY,CAAE,KAFX,CAEkBC,KAAK,CAAE,OAFzB,CAGHC,OAAO,CAAE,WAHN,CAGmBC,UAAU,CAAE,KAH/B,CAIHC,QAAQ,CAAE,MAJP,CAIeC,aAAa,CAAE,WAJ9B,CADX,CAOK,OAAO,CAAEP,WAPd,EASKlB,eATL,KASuBE,UAAU,CAAG,YAAH,CAAkB,WATnD,CADJ,CADJ,CAeH,CAED,cAAeJ,CAAAA,SAAf","sourcesContent":["import React, { useEffect, useState} from 'react'\r\nimport Axios from 'axios'\r\n\r\n\r\nfunction Subscribe(props) {\r\n\r\n    const [SubscribeNumber, setSubscribeNumber] = useState(0)\r\n    const [Subscribed, setSubscribed] = useState(false)\r\n    useEffect(() => {\r\n\r\n        let variable = { userTo: props.userTo}\r\n\r\n       Axios.post('/api/subscribe/subscribeNumber', variable)\r\n       .then(response => {\r\n           if(response.data.success) {\r\n                setSubscribeNumber(response.data.subscribeNumber)\r\n           } else {\r\n               alert('구독자 수 정보를 받아오지 못했습니다.')\r\n           }\r\n       })\r\n\r\n       let subscribedVariable = { userTo: props.userTo, userFrom: localStorage.getItem('userId') }\r\n\r\n       Axios.post('/api/subscribe/subscribed', subscribedVariable)\r\n       .then(response => {\r\n        if(response.data.success) {\r\n            setSubscribed(response.data.subscribed)\r\n        } else {\r\n            alert('정보를 받아오지 못했습니다.')\r\n        }\r\n    })\r\n    }, [])\r\n\r\n    const onSubscribe = () => {\r\n\r\n        let subscribedVariable = {\r\n\r\n            userTo: props.userTo,\r\n            userFrom: props.userFrom\r\n        }\r\n\r\n\r\n        if(Subscribed) {\r\n            //이미 구독중일 때\r\n\r\n            Axios.post('/api/subscribe/unSubscribe', subscribedVariable)\r\n                .then(response => {\r\n                    if(response.data.success) {\r\n                        setSubscribeNumber(SubscribeNumber - 1)\r\n                        setSubscribed(!Subscribed)\r\n                    }else {\r\n                        alert('구독 취소 실패')\r\n                    }\r\n                })\r\n        }else {\r\n            //아직 구독 중 아닐 때\r\n            Axios.post('/api/subscribe/subscribe', subscribedVariable)\r\n                .then(response => {\r\n                    if(response.data.success) {\r\n                        setSubscribeNumber(SubscribeNumber + 1)\r\n                        setSubscribed(!Subscribed)\r\n                    }else {\r\n                        alert('구독 실패')\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                style={{\r\n                    backgroundColor: `${Subscribed ? '#AAAAAA' : '#CC0000'}`, \r\n                    borderRadius: '4px', color: 'white',\r\n                    padding: '10px 16px', fontWeight: '500', \r\n                    fontSize: '1rem', textTransform: 'uppercase'\r\n                 }}\r\n                 onClick={onSubscribe}\r\n            >\r\n                {SubscribeNumber} {Subscribed ? 'Subscribed' : 'Subscribe'}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subscribe\r\n"]},"metadata":{},"sourceType":"module"}