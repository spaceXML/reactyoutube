{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kitri\\\\Documents\\\\GitHub\\\\reactyoutube\\\\client\\\\src\\\\components\\\\views\\\\VideoDetailPage\\\\Sections\\\\SingleComment.js\";\nimport React, { useState } from 'react';\nimport { Comment, Avatar, Button, Input } from 'antd';\nimport Axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport LikeDislikes from './LikeDislikes';\nconst {\n  TextArea\n} = Input;\n\nfunction SingleComment(props) {\n  const user = useSelector(state => state.user);\n  const [OpenReply, setOpenReply] = useState(false);\n  const [CommentValue, setCommentValue] = useState(\"\");\n\n  const onClickReplyOpen = () => {\n    setOpenReply(!OpenReply);\n  };\n\n  const onHandleChange = event => {\n    setCommentValue(event.currentTarget.value);\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const variables = {\n      contents: CommentValue,\n      writer: user.userData._id,\n      postId: props.postId,\n      responseTo: props.comment._id\n    };\n    Axios.post('/api/comment/saveComment', variables).then(response => {\n      if (response.data.success) {\n        props.refreshFunction(response.data.result);\n        setCommentValue(\"\");\n        setOpenReply(false);\n      } else {\n        alert('커멘트 저장 실패');\n      }\n    });\n  };\n\n  const actions = [/*#__PURE__*/React.createElement(LikeDislikes, {\n    userId: localStorage.getItem('userId'),\n    commentId: props.comment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    onClick: onClickReplyOpen,\n    key: \"comment-basic-reply-to\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }, \"Reply to\")];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Comment, {\n    actions: actions,\n    author: props.comment.writer.name,\n    avatar: /*#__PURE__*/React.createElement(Avatar, {\n      src: props.comment.writer.image,\n      alt: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }),\n    content: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 27\n      }\n    }, \" \", props.comment.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), OpenReply && /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      display: 'flex'\n    },\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    style: {\n      width: '100%',\n      borderRadius: '5px'\n    },\n    onChange: onHandleChange,\n    value: CommentValue,\n    placeholder: \"\\uCF54\\uBA58\\uD2B8\\uB97C \\uC791\\uC131\\uD574 \\uC8FC\\uC138\\uC694\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      width: '20%',\n      height: '52px'\n    },\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, \" Submit\")));\n}\n\nexport default SingleComment;","map":{"version":3,"sources":["C:/Users/kitri/Documents/GitHub/reactyoutube/client/src/components/views/VideoDetailPage/Sections/SingleComment.js"],"names":["React","useState","Comment","Avatar","Button","Input","Axios","useSelector","LikeDislikes","TextArea","SingleComment","props","user","state","OpenReply","setOpenReply","CommentValue","setCommentValue","onClickReplyOpen","onHandleChange","event","currentTarget","value","onSubmit","preventDefault","variables","contents","writer","userData","_id","postId","responseTo","comment","post","then","response","data","success","refreshFunction","result","alert","actions","localStorage","getItem","name","image","content","display","width","borderRadius","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,KAAlC,QAA+C,MAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeJ,KAArB;;AAEA,SAASK,aAAT,CAAuBC,KAAvB,EAA8B;AAE1B,QAAMC,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;;AACA,QAAMiB,gBAAgB,GAAG,MAAM;AAC3BH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD;;AAGA,QAAMK,cAAc,GAAIC,KAAD,IAAW;AAC9BH,IAAAA,eAAe,CAACG,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAf;AACH,GAFD;;AAGA,QAAMC,QAAQ,GAAIH,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACI,cAAN;AAEA,UAAMC,SAAS,GAAG;AACdC,MAAAA,QAAQ,EAAEV,YADI;AAEdW,MAAAA,MAAM,EAAEf,IAAI,CAACgB,QAAL,CAAcC,GAFR;AAGdC,MAAAA,MAAM,EAAEnB,KAAK,CAACmB,MAHA;AAIdC,MAAAA,UAAU,EAAEpB,KAAK,CAACqB,OAAN,CAAcH;AAJZ,KAAlB;AAOAvB,IAAAA,KAAK,CAAC2B,IAAN,CAAW,0BAAX,EAAuCR,SAAvC,EACCS,IADD,CACMC,QAAQ,IAAI;AACd,UAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAjB,EAA0B;AACtB1B,QAAAA,KAAK,CAAC2B,eAAN,CAAsBH,QAAQ,CAACC,IAAT,CAAcG,MAApC;AACAtB,QAAAA,eAAe,CAAC,EAAD,CAAf;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAJD,MAIM;AACFyB,QAAAA,KAAK,CAAC,WAAD,CAAL;AACH;AACJ,KATD;AAUH,GApBD;;AAqBA,QAAMC,OAAO,GAAG,cACZ,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAtB;AAAsD,IAAA,SAAS,EAAEhC,KAAK,CAACqB,OAAN,CAAcH,GAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADY,eAEX;AAAM,IAAA,OAAO,EAAEX,gBAAf;AAAiC,IAAA,GAAG,EAAC,wBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFW,CAAhB;AAKA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AACI,IAAA,OAAO,EAAEuB,OADb;AAEI,IAAA,MAAM,EAAE9B,KAAK,CAACqB,OAAN,CAAcL,MAAd,CAAqBiB,IAFjC;AAGI,IAAA,MAAM,eAAE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEjC,KAAK,CAACqB,OAAN,CAAcL,MAAd,CAAqBkB,KAAlC;AAAyC,MAAA,GAAG,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHZ;AAII,IAAA,OAAO,eAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKlC,KAAK,CAACqB,OAAN,CAAcc,OAAnB,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAQKhC,SAAS,iBACN;AAAM,IAAA,KAAK,EAAE;AAAEiC,MAAAA,OAAO,EAAE;AAAX,KAAb;AAAiC,IAAA,QAAQ,EAAExB,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,KAAK,EAAE;AAAEyB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,YAAY,EAAC;AAA9B,KADX;AAEI,IAAA,QAAQ,EAAE9B,cAFd;AAGI,IAAA,KAAK,EAAEH,YAHX;AAII,IAAA,WAAW,EAAC,gEAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAQI;AAAQ,IAAA,KAAK,EAAE;AAAEgC,MAAAA,KAAK,EAAE,KAAT;AAAgBE,MAAAA,MAAM,EAAE;AAAxB,KAAf;AAAiD,IAAA,OAAO,EAAE3B,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ,CATR,CADJ;AAyBH;;AAED,eAAeb,aAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { Comment, Avatar, Button, Input } from 'antd';\r\nimport Axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\nimport LikeDislikes from './LikeDislikes';\r\nconst { TextArea } = Input;\r\n\r\nfunction SingleComment(props) {\r\n\r\n    const user = useSelector(state => state.user);\r\n    const [OpenReply, setOpenReply] = useState(false)\r\n    const [CommentValue, setCommentValue] = useState(\"\")\r\n    const onClickReplyOpen = () => {\r\n        setOpenReply(!OpenReply)\r\n    }\r\n    const onHandleChange = (event) => {\r\n        setCommentValue(event.currentTarget.value)\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const variables = {\r\n            contents: CommentValue,\r\n            writer: user.userData._id,\r\n            postId: props.postId,\r\n            responseTo: props.comment._id\r\n        }\r\n\r\n        Axios.post('/api/comment/saveComment', variables)\r\n        .then(response => {\r\n            if(response.data.success) {\r\n                props.refreshFunction(response.data.result)\r\n                setCommentValue(\"\")\r\n                setOpenReply(false)\r\n            }else {\r\n                alert('커멘트 저장 실패')\r\n            }\r\n        })\r\n    }\r\n    const actions = [\r\n        <LikeDislikes userId={localStorage.getItem('userId')} commentId={props.comment._id} />\r\n        ,<span onClick={onClickReplyOpen} key=\"comment-basic-reply-to\">Reply to</span>\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Comment\r\n                actions={actions}\r\n                author={props.comment.writer.name}\r\n                avatar={<Avatar src={props.comment.writer.image} alt />}\r\n                content={ <p> {props.comment.content}</p>}\r\n            />\r\n            \r\n            {OpenReply &&\r\n                <form style={{ display: 'flex'}} onSubmit={onSubmit} >\r\n                    <textarea \r\n                        style={{ width: '100%', borderRadius:'5px' }}\r\n                        onChange={onHandleChange}\r\n                        value={CommentValue}\r\n                        placeholder=\"코멘트를 작성해 주세요\"\r\n                    />\r\n                    <br />\r\n                    <button style={{ width: '20%', height: '52px' }} onClick={onSubmit} > Submit</button>\r\n\r\n                    \r\n                </form>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComment\r\n"]},"metadata":{},"sourceType":"module"}